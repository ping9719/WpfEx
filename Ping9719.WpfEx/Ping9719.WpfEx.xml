<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ping9719.WpfEx</name>
    </assembly>
    <members>
        <member name="T:Ping9719.WpfEx.GridAttach">
            <summary>
            Grid 扩展属性
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.GridAttach.GetColumns(System.Windows.DependencyObject)">
            <summary>
            得到列字符串。如“*,2.5*,100,auto”
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.GridAttach.SetColumns(System.Windows.DependencyObject,System.String)">
            <summary>
            设置列字符串。如“*,2.5*,100,auto”
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.GridAttach.GetRows(System.Windows.DependencyObject)">
            <summary>
            得到行字符串。如“*,2.5*,100,auto”
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.GridAttach.SetRows(System.Windows.DependencyObject,System.String)">
            <summary>
            设置行字符串。如“*,2.5*,100,auto”
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.AutoGrid">
            <summary>
            自动表格（会自动设置子项在表格中的索引）
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.ChildHorizontalAlignment">
            <summary>
            所有子项水平对齐方式
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.ChildMargin">
            <summary>
            所有子项边距
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.ChildVerticalAlignment">
            <summary>
            所有子项垂直对齐方式
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.ColumnCount">
            <summary>
            列的数量
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.Columns">
            <summary>
            列定义（用逗号分割，如“100,*,2*,auto”）
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.ColumnWidth">
            <summary>
            所有列的宽度
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Ping9719.WpfEx.AutoGrid.IsAutoIndexing" -->
        <member name="P:Ping9719.WpfEx.AutoGrid.Orientation">
            <summary>
            索引方向。（水平：从左到右，从上到下；垂直：从上到下，从左到右）默认水平
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.RowCount">
            <summary>
            行的数量
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.RowHeight">
            <summary>
            所有行高
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.AutoGrid.Rows">
            <summary>
            行定义（用逗号分割，如“100,*,2*,auto”）
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.ColumnCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            列数量更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.ColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            列更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.FixedColumnWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            固定列宽度更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.FixedRowHeightChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            固定行高度更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.Parse(System.String)">
            <summary>
            解析逗号分隔文本的网格长度数组
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.RowCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            行数更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.RowsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            行更改事件
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.OnChildHorizontalAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            当[子水平对齐更改]时调用
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.OnChildMarginChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            当[子布局更改]时调用。
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.OnChildVerticalAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            当[子垂直对齐更改]时调用。
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.ApplyChildLayout(System.Windows.UIElement)">
            <summary>
            应用子边距和布局效果，如对齐
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.Clamp(System.Int32,System.Int32)">
            <summary>
            将值限制在最大值
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.AutoGrid.PerformLayout">
            <summary>
            执行行和列索引的网格布局
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.ImageListener">
            <summary>
            图像监听。可针对文件夹文件进行监听显示
            </summary>
            <summary>
            ImageListener
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.ImageListener.FullPath">
            <summary>
            当前加载的图像路径
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.ImageListener.IsAutoActiveTabItem">
            <summary>
            如果在选项卡中，是否自动切换到当前变化的项来。默认为false
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.ImageListener.StartListener(System.String,System.String)">
            <summary>
            开始监听
            </summary>
            <param name="path">监听的目录或文件</param>
            <param name="filter">对目录的筛选值（文件无效）</param>
            <returns>是否监听成功</returns>
        </member>
        <member name="M:Ping9719.WpfEx.ImageListener.StopListener">
            <summary>
            停止监听
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.ImageListener.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.ImageListenerModel.ImgAutoSize">
            <summary>
            自适应大小
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.IotServoMode">
            <summary>
            工业控件：伺服模式
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.Text">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.Location">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.Speed1">
            <summary>
            手动速度
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.Speed2">
            <summary>
            自动速度
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.IsFold">
            <summary>
            是否折叠
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotServoMode.IsVis1">
            <summary>
            是否显示手动速度
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.IotServoMode.LocationChange">
            <summary>
            改变伺服的位置时
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.IotServoMode.SpeedChange">
            <summary>
            改变伺服的速度时
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.ServoSpeed">
            <summary>
            伺服模式速度
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.ServoSpeed.Name">
            <summary>
            模式名称
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.ServoSpeed.Speed">
            <summary>
            当前速度
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.IotState">
            <summary>
            工业控件：状态
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotState.IsOk">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotState.OkBrush">
            <summary>
            成功状态下的颜色
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotState.NotOkBrush">
            <summary>
            不成功状态下的颜色
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotState.InteriorHeight">
            <summary>
            内部高度
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.IotStateInfo">
            <summary>
            工业控件：状态信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.Header">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.HeaderFontWeight">
            <summary>
            标题字体粗细
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.Postfix">
            <summary>
            后缀文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.ValueStr">
            <summary>
            值，字符串
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.ValueNull">
            <summary>
            值为null时显示的内容
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.ValueBool">
            <summary>
            值，bool
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.IsBool">
            <summary>
            是否bool类型
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.OkBrush">
            <summary>
            成功状态下的颜色
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.NotOkBrush">
            <summary>
            不成功状态下的颜色
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.InteriorHeight">
            <summary>
            内部高度
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotStateInfo.ValueStrBoolIsBool">
            <summary>
            是否字符串bool也当做bool
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.IotUrnMode">
            <summary>
            工业控件：气缸模式
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotUrnMode.Button1">
            <summary>
            按钮1
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotUrnMode.Button2">
            <summary>
            按钮2
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotUrnMode.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotUrnMode.IsButBadge1">
            <summary>
            是否显示按钮1上面的标记
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.IotUrnMode.IsButBadge2">
            <summary>
            是否显示按钮2上面的标记
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.RunStateButton">
            <summary>
            运行状态按钮
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.RunStateButtonClick">
            <summary>
            最近一次单击的按钮
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.RunStateButton.Click">
            <summary>
            单击按钮时
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.IsVisRset">
            <summary>
            是否显示复位按钮
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.IsAutoRset">
            <summary>
            是否自动控制复位按钮是否可用
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.RunState">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.StartButContent">
            <summary>
            启动按钮内容
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.PauseButContent">
            <summary>
            暂停按钮内容
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.ContinueButContent">
            <summary>
            继续按钮内容
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.StopButContent">
            <summary>
            停止按钮内容
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.RunStateButton.RsetButContent">
            <summary>
            复位按钮内容
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.SyncProgressBar">
            <summary>
            同步进度条
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.SyncErrClickInfo">
            <summary>
            同步错误点击时提示信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.QueueTaskOkVisible">
            <summary>
            在任务队列成功的时候显示控件。默认false
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.InteriorHeight">
            <summary>
            内部显示高度
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.SyncState">
            <summary>
            同步状态
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.SyncTextOk">
            <summary>
            同步成功描述文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.SyncTextIn">
            <summary>
            同步中描述文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.SyncTextErr">
            <summary>
            同步错误描述文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.SyncProgressBar.QueueTask">
            <summary>
            任务队列
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.TextBoxLog">
            <summary>
            日志文本框
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxLog.IsLoadedFirst">
            <summary>
            是否第一次加载
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.TimeFormatVal">
            <summary>
            格式时间字符串。
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.TimeFormat">
            <summary>
            格式时间字符串。默认 HH:mm:ss.fff=>
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.MaxLineNumVal">
            <summary>
            最大行数
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.MaxLineNum">
            <summary>
            最大行数（超过自动清除4分之1）。默认400
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.MaxLineNumClearAll">
            <summary>
            满足了清除条件时，是否清空所有文本。默认false
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.AutoScroll">
            <summary>
            是否自动滚动。默认true
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.AddTextClearSelection">
            <summary>
            添加文本时，清空用户的选择。对性能有影响提升。（默认false）
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.TokenVal">
            <summary>
            标识token
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.Token">
            <summary>
            标识token
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.AppendText2(System.String)">
            <summary>
            将字符串追加到文本
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxLog.TextBoxLogAdd">
            <summary>
            有新的日志加入
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxLog.TokenNullSeekFirst">
            <summary>
            Token为空时查找第一个组件还是查找激活的组件，默认true
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxLog.TextBoxLogAll">
            <summary>
            所有的正在使用的日志组件
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLog.TextBoxLogCount">
            <summary>
            组件数量
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.AddLog(System.String,System.DateTime)">
            <summary>
            追加日志信息
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.AddLog(System.String,System.String,System.Nullable{System.DateTime},System.Object)">
            <summary>
            追加日志信息
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.AddLogs(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.DateTime},System.Object)">
            <summary>
            追加多条日志信息
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.ClearLog(System.String)">
            <summary>
            清除所有信息
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.ClearLog(Ping9719.WpfEx.TextBoxLog)">
            <summary>
            清除所有信息
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLog.SeeControl(System.String)">
            <summary>
            找寻组件
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Ping9719.WpfEx.TextBoxLogInfo">
            <summary>
            日志加入信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.Text">
            <summary>
            文本信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.Tag">
            <summary>
            自定义的信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.Token">
            <summary>
            标识token
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.IsSeekToken">
            <summary>
            是否寻找到此Token关联的组件
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.SeekToken">
            <summary>
            找寻到的组件的token
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxLogInfo.TimeFormat">
            <summary>
            找寻到的组件的时间格式字符串
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxLogInfo.ToString">
            <summary>
            转为字符串
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.TextBoxScanner">
            <summary>
            扫码文本框
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxScanner.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.IsAutoAlphanumeric">
            <summary>
            是否自动切换为英文的键盘输入法，默认true
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.IsAutoFocus">
            <summary>
            是否自动设置焦点（在显示控件的时候尝试将焦点设置为此元素）
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.AutoClear">
            <summary>
            自动清除文本（当达到计时变化间隔时）
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.TriggerMode">
            <summary>
            触发方式，默认为时间
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.IntervalTime">
            <summary>
            计时变化间隔，默认600ms
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.StringEnd">
            <summary>
            字符串结尾，默认（\n）
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.TextBoxScanner.TextScannerChanged">
            <summary>
            文本扫码改变
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.TextBoxScanner.ScannerText">
            <summary>
            扫码文本
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxScanner.FocusInvoke(System.Int32)">
            <summary>
            尝试将焦点设置为此元素，针对多线程优化
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.TextBoxScanner.Clear">
            <summary>
            清除所有内容
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.TextBoxScannerAutoClear">
            <summary>
            自动清空模式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxScannerAutoClear.NoClear">
            <summary>
            默认，不清空
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxScannerAutoClear.Clear">
            <summary>
            每次清空
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxScannerAutoClear.NextClear">
            <summary>
            下次清空
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.TextBoxScannerTriggerMode">
            <summary>
            自动清空模式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxScannerTriggerMode.IntervalTime">
            <summary>
            一定时间间隔没有变化
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.TextBoxScannerTriggerMode.StringEnd">
            <summary>
            指定的字符串结尾
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.UserControlBase">
            <summary>
            对用户控件的扩展
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.UserControlBase.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.UserControlBase.LoadedVisibleFirst">
            <summary>
            首次加载并显示控件时发生
            </summary>
        </member>
        <member name="E:Ping9719.WpfEx.UserControlBase.LoadedVisible">
            <summary>
            加载并显示控件时发生
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.UserControlBase.IsLoadedVisible">
            <summary>
            是否已加载并显示界面
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.UserControlBase.IsInDesignMode">
            <summary>
            是否处于设计模式
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Boolean2VisibilityHiddenConverter">
            <summary>
            将bool转为Visibility
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Boolean2VisibilityHiddenReConverter">
            <summary>
            将bool转为Visibility
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Enum2BoolConverter">
            <summary>
            将枚举转为布尔
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Enum2IntConverter">
            <summary>
            将枚举转为数字
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Enum2StrConverter">
            <summary>
            将枚举转为字符串（支持Description特性）
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.List2StrConverter">
            <summary>
            将数组、集合按照默认逗号分隔转为字符串
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.Version2StrConverter">
            <summary>
            版本号与字符串转换器
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.QueueTaskTimeState">
            <summary>
            简单定时任务队列执行器运行状态
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.Start">
            <summary>
            开始，正在运行循环检测任务中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.ForTask">
            <summary>
            正在执行循环任务中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.QueueTask">
            <summary>
            正在执行队列任务中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.EndTaskOk">
            <summary>
            结束任务，并且没有遇到错误，并等待继续运行
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.EndTaskErr">
            <summary>
            结束任务，并且遇到错误，并等待继续运行
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTimeState.Stop">
            <summary>
            已暂停、停止
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.RunState">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunState.Run">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunState.Pause">
            <summary>
            暂停中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunState.Stop">
            <summary>
            已停止
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.RunStateButtonClick">
            <summary>
            运行状态点击的按钮
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunStateButtonClick.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunStateButtonClick.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunStateButtonClick.Continue">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunStateButtonClick.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.RunStateButtonClick.Rset">
            <summary>
            复位
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.ServoClickType">
            <summary>
            伺服运动位置类型
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.SetSpeed">
            <summary>
            设置速度
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.MoveTo">
            <summary>
            运动到指定位置
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.StartDotAdd">
            <summary>
            开始点动增加
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.EndDotAdd">
            <summary>
            结束点动增加
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.StartDotSub">
            <summary>
            开始点动减少
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ServoClickType.EndDotSub">
            <summary>
            结束点动减少
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.SyncProgressBarState">
            <summary>
            同步进度条状态
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.SyncProgressBarState.OkVisible">
            <summary>
            同步成功并且显示
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.SyncProgressBarState.OkCollapsed">
            <summary>
            同步成功不显示控件
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.SyncProgressBarState.SyncIn">
            <summary>
            同步中
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.SyncProgressBarState.SyncErr">
            <summary>
            同步失败
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.DependencyExtensions">
            <summary>
            依赖属性扩展
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.DependencyExtensions.SetIfDefault``1(System.Windows.DependencyObject,System.Windows.DependencyProperty,``0)">
            <summary>
            设置为默认值
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.EnumHelp">
            <summary>
            枚举帮助扩展类
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.EnumHelp.GetAttributeDescription(System.Enum)">
            <summary>
            得到枚举特性Description
            </summary>
            <param name="obj">枚举</param>
            <returns>返回特性中的说明文本，没有找到特性返回null</returns>
        </member>
        <member name="T:Ping9719.WpfEx.ImageFormat">
            <summary>
            图片格式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ImageFormat.Bmp">
            <summary>
            位图 (BMP) 图像格式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ImageFormat.Gif">
            <summary>
            图形交换格式 (GIF) 图像格式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ImageFormat.Jpeg">
            <summary>
            联合图像专家组 (JPEG) 图像格式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ImageFormat.Png">
            <summary>
             W3C 可移植网络图形 (PNG) 图像格式
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.ImageFormat.Tiff">
            <summary>
            标记图像文件格式 (TIFF) 图像格式
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.QueueTaskTime">
            <summary>
            简单定时任务队列执行器
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.IsStart">
            <summary>
            是否启动
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.IsRunNoConflict">
            <summary>
            是否允许不冲突。运行定期任务的时候不执行队列任务，运行队列任务的时候不执行定期任务
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.WaitCount">
            <summary>
            等待任务数
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.ForTask">
            <summary>
            队列循环任务
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.QueueTask">
            <summary>
            队列任务
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.QueueTaskTime.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.QueueTaskTime.StateChange">
            <summary>
            状态发生改变（本身，状态，错误）
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.#ctor">
            <summary>
            初始化简单定时任务队列执行器
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.Stop">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.AddForTask(System.Action,System.TimeSpan,System.Boolean)">
            <summary>
            添加循环任务
            </summary>
            <param name="action">需要执行的方法</param>
            <param name="timeSpan">执行的间隔</param>
            <param name="isStartRun">启动是否马上就执行方法（不等待间隔时间）</param>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.AddQueueTask(System.Action)">
            <summary>
            添加队列任务
            </summary>
            <param name="action">需要执行的方法</param>
        </member>
        <member name="M:Ping9719.WpfEx.QueueTaskTime.AddQueueTask(System.Action{System.Object},System.Object)">
            <summary>
            添加队列任务
            </summary>
            <param name="action">需要执行的方法</param>
            <param name="state">参数</param>
        </member>
        <member name="T:Ping9719.WpfEx.WpfHelp">
            <summary>
            wpf扩展帮助
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.WpfHelp.SaveToImg(System.Windows.FrameworkElement,System.String,Ping9719.WpfEx.ImageFormat,System.Windows.Media.Brush)">
            <summary>
            保存到图片
            </summary>
            <param name="visual">用户控件，控件等，不建议窗体</param>
            <param name="fileName">全文件名</param>
            <param name="imageFormat">文件格式（针对png,jpg已做优化）</param>
            <param name="background">绘画画布颜色，png默认透明,jpg默认白色</param>
        </member>
        <member name="M:Ping9719.WpfEx.WpfHelp.SaveToImg(System.Windows.FrameworkElement,Ping9719.WpfEx.ImageFormat,System.Windows.Media.Brush)">
            <summary>
            保存到图片到流
            </summary>
            <param name="visual">用户控件，控件等，不建议窗体</param>
            <param name="imageFormat">文件格式（针对png,jpg已做优化）</param>
            <param name="background">绘画画布颜色，png默认透明,jpg默认白色</param>
        </member>
        <member name="T:Ping9719.WpfEx.Mvvm.BindableBase">
            <summary>
            对 INotifyPropertyChanged 的实现
            </summary>
            <remarks>
            代码列子：
            <code>
            //XML代码
            &lt;Button Content="{Binding Txt}"/&gt;
            
            //在窗体中设置绑定数据源
            this.DataContext = new MainWindowViewModel()
            
            //ViewModel类
            public class MainWindowViewModel : BindableBase
            {
                private string _Txt = "按钮";
                public string Title
                {
                    get { return _Txt; }
                    set { SetProperty(ref _Txt, value); }
                }
            }
            </code>
            </remarks>
        </member>
        <member name="E:Ping9719.WpfEx.Mvvm.BindableBase.PropertyChanged">
            <summary>
            在属性值更改时发生。
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            检查属性是否已经与所需的值匹配。 设置属性并仅在必要时通知侦听器。 
            </summary>
            <typeparam name="T">属性的类型</typeparam>
            <param name="storage">设置的属性，需要有get;set;</param>
            <param name="value">设置的值</param>
            <param name="propertyName"> 用于通知侦听器的属性的名称。 该值是可选的，可以在从支持CallerMemberName的编译器中调用时自动提供。 </param>
            <returns>如果值被更改，则为True，如果现有值与期望值匹配，则为false。 </returns>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.BindableBase.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            检查属性是否已经与所需的值匹配。 设置属性并仅在必要时通知侦听器。 
            </summary>
            <typeparam name="T">属性的类型</typeparam>
            <param name="storage">设置的属性，需要有get;set;</param>
            <param name="value">设置的值</param>
            <param name="onChanged">更改属性值后调用的操作。 </param>
            <param name="propertyName"> 用于通知侦听器的属性的名称。 该值是可选的，可以在从支持CallerMemberName的编译器中调用时自动提供。 </param>
            <returns>如果值被更改，则为True，如果现有值与期望值匹配，则为false。 </returns>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            引发此对象的PropertyChanged事件。
            </summary>
            <param name="propertyName">用于通知侦听器的属性的名称。 该值是可选的，可以在从支持<see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>的编译器中调用时自动提供。 </param>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.BindableBase.OnPropertyChanged(System.String)">
            <summary>
            引发此对象的PropertyChanged事件。
            </summary>
            <param name="propertyName">用于通知侦听器的属性的名称。</param>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.BindableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            引发此对象的PropertyChanged事件。
            </summary>
            <param name="args">这是 PropertyChangedEventArgs</param>
        </member>
        <member name="T:Ping9719.WpfEx.Mvvm.DelegateCommand">
            <summary>
            委托一个命名
            </summary>
            <remarks>
            代码列子：
            <code>
            //XML代码
            &lt;Button Command="{Binding MyCommand}" Content="按钮"/&gt;
            
            //在窗体中设置绑定数据源
            this.DataContext = new MainWindowViewModel()
            
            //ViewModel类
            public class MainWindowViewModel : BindableBase
            {
                public ICommand MyCommand { get => new DelegateCommand(My); }
                //执行方法
                public void My()
                {
                    //code
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.DelegateCommand.#ctor(System.Action)">
            <summary>
            创建实列
            </summary>
            <param name="executeMethod">一个方法</param>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            创建实列
            </summary>
            <param name="executeMethod">一个方法</param>
            <param name="canExecuteMethod">是否可以执行此方式。使用方式：() => true</param>
        </member>
        <member name="T:Ping9719.WpfEx.Mvvm.DelegateCommand`1">
            <summary>
            委托一个带参数的命名
            </summary>
            <typeparam name="T">参数的类型，不能为null</typeparam>
            <remarks>
            代码列子：
            <code>
            //XML代码
            &lt;Button Command="{Binding MyCommand}" CommandParameter="abc" Content="按钮"/&gt;
            
            //在窗体中设置绑定数据源
            this.DataContext = new MainWindowViewModel()
            
            //ViewModel类
            public class MainWindowViewModel : BindableBase
            {
                public ICommand MyCommand { get => new DelegateCommand&lt;string&gt;(My); }
                //执行方法
                public void My(string obj)
                {
                    //code
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            创建实列
            </summary>
            <param name="executeMethod">带参数的一个方法</param>
        </member>
        <member name="M:Ping9719.WpfEx.Mvvm.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            创建实列
            </summary>
            <param name="executeMethod">带参数的一个方法</param>
            <param name="canExecuteMethod">带参数的一个方法并返回bool。使用方法：(obj) => true</param>
        </member>
        <member name="T:Ping9719.WpfEx.MainLoadWindow">
            <summary>
            入口页面加载等待窗体
            </summary>
            <summary>
            MainLoadWindow
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.MainLoadWindow.Show(System.Tuple{System.String,System.String,System.Action}[])">
            <summary>
            显示并运行
            </summary>
            <param name="funcs">任务，1正在进行的任务的提示（如：正在进行XX中...），2此任务错误的提示（如：XX失败），3任务</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MainLoadWindow.Show(Ping9719.WpfEx.MainLoadInfo[])">
            <summary>
            显示并运行
            </summary>
            <param name="funcs">加载的信息</param>
            <returns>是否全部成功</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MainLoadWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.MainLoadInfo">
            <summary>
            窗体加载的信息
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.Task">
            <summary>
            加载的任务
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.Info">
            <summary>
            提示。默认，加载中...
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.InfoErr">
            <summary>
            加载失败显示的提示。默认，加载失败
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.Err">
            <summary>
            加载中出现的错误
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.IsRetry">
            <summary>
            任务失败是否可以点击重试按钮，默认true
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.IsErrIgnore">
            <summary>
            是否可以对错误进行忽略并点击继续后继续，默认false
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MainLoadInfo.StayTime">
            <summary>
            驻留视觉时间，默认180ms（视觉暂留0.1，人眼辨认0.3）
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.MessageBoxTip">
            <summary>
            提示框
            </summary>
            <summary>
            MessageBoxTip
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTip.ContentText">
            <summary>
            内容文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTip.Buttons">
            <summary>
            全部按钮
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTip.ClickButton">
            <summary>
            确定后选中的按钮
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTip.IsVisCloseBut">
            <summary>
            是否显示关闭按钮
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTip.Showing">
            <summary>
            显示成功前,返回是否弹框
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTip.Showed">
            <summary>
            显示成功后
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTip.Clicked">
            <summary>
            点击成功后
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTip.Show(System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="isVisCloseBut">界面右上角是否显示关闭按钮</param>
            <returns>点击的按钮文本</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTip.Show(System.String,System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="title">标题</param>
            <param name="isVisCloseBut">界面右上角是否显示关闭按钮</param>
            <returns>点击的按钮文本</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTip.Show(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="buttons">按钮内容</param>
            <param name="isVisCloseBut">界面右上角是否显示关闭按钮</param>
            <returns>点击的按钮文本</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTip.Show(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="title">标题</param>
            <param name="buttons">按钮内容</param>
            <param name="isVisCloseBut">界面右上角是否显示关闭按钮</param>
            <returns>点击的按钮文本</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTip.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Ping9719.WpfEx.MessageBoxTipInput">
            <summary>
            提示框
            </summary>
            <summary>
            MessageBoxTipInput
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTipInput.ContentText">
            <summary>
            内容文本
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTipInput.ContentHint">
            <summary>
            内容提示
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTipInput.IsVisCloseBut">
            <summary>
            是否显示关闭按钮
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTipInput.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Ping9719.WpfEx.MessageBoxTipInput.InputValue">
            <summary>
            输入值
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTipInput.Showing">
            <summary>
            显示成功前,返回是否弹框
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTipInput.Showed">
            <summary>
            显示成功后
            </summary>
        </member>
        <member name="F:Ping9719.WpfEx.MessageBoxTipInput.Clicked">
            <summary>
            点击成功后
            </summary>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show(System.String,System.String,System.Func{System.Object,System.String},System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框并尝试转为指定类型
            </summary>
            <param name="type">不区分大小写的目标类型</param>
            <param name="contentText">内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的内容（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show(System.String,System.String,System.String,System.String,System.Func{System.Object,System.String},System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框并尝试转为指定类型
            </summary>
            <param name="type">不区分大小写的目标类型</param>
            <param name="contentText">内容</param>
            <param name="title">标题</param>
            <param name="contentHint">内部内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的内容（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show``1(System.String,System.Func{``0,System.String},System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框并尝试转为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="contentText">内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的内容（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show``1(System.String,System.String,System.String,System.Func{``0,System.String},System.String,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框并尝试转为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="contentText">内容</param>
            <param name="title">标题</param>
            <param name="contentHint">内部内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的内容（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show(System.String,System.Func{System.String,System.String},System.String,System.Boolean,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的文本（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.Show(System.String,System.String,System.String,System.Func{System.String,System.String},System.String,System.Boolean,System.Boolean,System.Windows.Window,System.Object)">
            <summary>
            显示输入提示框
            </summary>
            <param name="contentText">内容</param>
            <param name="title">标题</param>
            <param name="contentHint">内部内容</param>
            <param name="verify">验证委托</param>
            <param name="defaultValue">文本框里面的内容</param>
            <param name="isVisCloseBut">是否显示关闭按钮</param>
            <param name="owner">窗体所有者</param>
            <returns>输入的文本（关闭为null）</returns>
        </member>
        <member name="M:Ping9719.WpfEx.MessageBoxTipInput.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
